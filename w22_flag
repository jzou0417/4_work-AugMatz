stroke(0,200,240);

// cyan
fill(0,200,240);

rect(100,60,100,180);
//tail
rect(140,240,20,40);
rect(160,260, 60,20);
rect(220,220,20,60);
//ears
triangle(170,60,190,60,180,45);
triangle(110,60,130,60,120,45);

//Blue
fill(40,40,160);
stroke(40,40,160);
//nose
triangle(130,105,170,105,150,130);

ellipse(150,190,40,60);
rect(110,100,80,3);
rect(140,130,20,3);

line(90,120,130,120);
line(90,140,130,122);
line(170,120,210,120);
line(170,122,210,140);




void setup(){
  triangleGridGradient(new PVector(0,0),16,16,10, color(255,100,100),color(0,0,255));
  
}

void triangleGridGradient(PVector pos, int rows, int triangles, int size,color c1, color c2){
  for(int row = 0; row < rows; row++){
   for(int triangle = 0; triangle < triangles; triangle++){
     float xOffset = pos.x + size * triangle;
     fill(lerpColor(c1,c2,(triangle/float(triangles) + row/float(rows))/2));
     if(triangle%2 == 0){
       triangle(xOffset, pos.y + size * 1.5 * (row+1), xOffset + size, pos.y + size * 1.5 * row, xOffset - size, pos.y + size * 1.5 * row);

     } else {
       
       triangle(xOffset, pos.y + size * 1.5 * row, xOffset + size, pos.y + size * 1.5 * (row+1), xOffset - size, pos.y + size * 1.5 * (row+1));

     }
   }
  }
  
}
